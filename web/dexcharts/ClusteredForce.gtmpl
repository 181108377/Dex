<!DOCTYPE html>
<meta charset="utf-8">
<style>
  html,body{
    height : 100%;
    min-height : 100%;
    width : 100%;
    min-width : 100%;
  }
  body {
    font: 10px sans-serif;
  }

  .arc path {
    stroke: #fff;
  }
  
  #LegendArea {
    width : 100%;
    height : 5%;
  }
  
  #ChartArea {
    width : 100%;
    height : 90%;
  }

<%
  println new File("javascript/jqueryui/latest/jquery-ui.min.css").text
  println new File("javascript/jqueryui/latest/jquery-ui.theme.min.css").text
%>
</style>
<html>
  <head>
    <title>DexCharts : Clustered Force</title>
  </head>
<script>
<%
  println new File("javascript/jquery/latest/jquery-2.1.3.min.js").text
  println new File("javascript/jqueryui/latest/jquery-ui.min.js").text
  println new File("javascript/underscore/latest/underscore-min.js").text
  println new File("javascript/d3/latest/d3.min.js").text
  println new File("C:/WS/dexjs/build/js/dex.js").text
  println new File("C:/WS/dexjs/src/charts/d3/HorizontalLegend.js").text
  println new File("C:/WS/dexjs/src/charts/d3/ClusteredForce.js").text
%>
</script>
  <body>
    <svg id="ChartArea">
      <defs id="gradients"></defs>
    </svg>
    <svg id="LegendArea"></svg>
<script>
<%
  def header = "[" + dexData.header.collect { return "\"$it\"" }.join(',') + "]"
  def data = []
  dexData.data.eachWithIndex
  {
    row, ri ->
    data << "[" + row.collect { return "\"$it\"" }.join(',') + "]"
  }
  println "var csv = { 'header' : $header,\n 'data' : [" + data.join(',\n') + "] };";
%>

//console.dir(csv);
//console.dir(dex.csv.numericSubset(csv));
var numericCsv = dex.csv.numericSubset(csv);

var chart = new dex.charts.d3.ClusteredForce({
  'parent'                : "#ChartArea",
  'csv'                   : numericCsv,
  'color' : d3.scale.category10(),
  'circle.fill.fillColor' : function (d, i) {
    var darkColor = dex.color.shadeColor(d.color, -20);
    var gradientId = "gradient" + d.color.substring(1)
    var grad = d3.select("#gradients").selectAll("#" + gradientId)
      .data([ gradientId ])
      .enter()
      .append("radialGradient")
      .attr("class", "colorGradient")
      .attr("id", gradientId)
      .attr("gradientUnits", "objectBoundingBox")
      .attr("fx", "30%")
      .attr("fy", "30%");
    grad.append("stop")
      .attr("offset", "0%")
      .attr("style", "stop-color:#FFFFFF");

    // Middle
    grad.append("stop")
      .attr("offset", "40%")
      .attr("style", "stop-color:" + d.color);

    // Outer Edges
    grad.append("stop")
      .attr("offset", "100%")
      .attr("style", "stop-color:" + darkColor);

    return "url(#" + gradientId + ")";
  }
});

var legend = new dex.charts.d3.HorizontalLegend({
  parent  : "#LegendArea",
  labels  : numericCsv.header,
  caption : "Legend:",
  color   : d3.scale.category10()
});

chart.render();
legend.render();

</script>
</body>
</html>