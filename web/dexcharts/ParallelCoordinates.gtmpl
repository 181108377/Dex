<!DOCTYPE html>
<meta charset="utf-8">
<style>
  html,body{
    height : 100%;
    min-height : 100%;
    width : 100%;
    min-width : 100%;
  }

textarea
{
    width:100%;
}
.textwrapper
{
    border:1px solid #999999;
    margin:5px 0;
    padding:5px;
}

.background path
{
  fill: none;
  stroke: #ccc;
  stroke-opacity: .9;
  shape-rendering: crispEdges;
}

.foreground path
{
  fill: none;
  stroke: steelblue;
  stroke-opacity: .9;
}

.brush .extent
{
  fill-opacity: .3;
  stroke: #fff;
  shape-rendering: crispEdges;
}

.axis line, .axis path
{
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.axis text
{
  text-shadow: 0 1px 0 #fff;
}

<%
  println new File("javascript/jqueryui/latest/jquery-ui.min.css").text
  println new File("javascript/jqueryui/latest/jquery-ui.theme.min.css").text
%>

</style>
<html>
  <head>
<script>
<%
  println new File("javascript/jquery/latest/jquery-2.1.3.min.js").text
  println new File("javascript/jqueryui/latest/jquery-ui.min.js").text
  println new File("javascript/underscore/latest/underscore-min.js").text
  println new File("javascript/d3/latest/d3.min.js").text
  println new File("javascript/dexjs/latest/dex.js").text
%>
</script>
    <title>DexCharts : Parallel Coordinates</title>
  </head>
  <body>
  <div id="config" style="visibility: hidden"></div>
  <svg id="ChartArea" width="100%" height="100%"/>
<script>

function setConfiguration(config)
{
  dex.console.log("Configuration", config);
  chart.config = dex.config.expandAndOverlay(config, chart.config);
  save('#config', config);
  chart.update();
}

function load(location) {
  var config = {};

  \$(location + " div").each(function(i) {
    dex.console.log("Loading Setting: '" + \$(this).attr('id') + "'='" +
      \$(this).attr('value') + "'"); 
    config[\$(this).attr('id')] = \$(this).attr('value');
  });

  dex.console.log("Loaded Configuration:", config);
  return config;
}

function save(location, config) {
  dex.console.log("Saving Configuration To: " + location, config);
  \$(location).children().remove();
  _.keys(config).forEach(function (key) {
    \$(location).append("<div id='" + key + "' value='" + config[key] + "'></div>");
  });
}

<%
  def header = "[" + dexData.header.collect { return "\"$it\"" }.join(',') + "]"
  def data = []
  dexData.data.eachWithIndex
  {
    row, ri ->
    data << "[" + row.collect { return "\"$it\"" }.join(',') + "]"
  }
  println "var csv = { 'header' : $header,\n 'data' : [" + data.join(',\n') + "] };";
%>

var config = dex.config.expandAndOverlay({
  parent : "#ChartArea",
  csv : csv,
  'normalize' : false }, load("#config"));

var chart = new dex.charts.d3.ParallelCoordinates(config);

\$("#ChartArea").children().remove();

chart.render();

</script>
</body>
</html>