<!DOCTYPE html>
<% import com.dexvis.util.DexUtil %>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <title>Tree Map</title>

<script type="text/javascript">
<% println new File("javascript/d3/d3.v2.js").text %>
</script>

<style>
<% println new File("javascript/jquery/1.9.1/css/ui-lightness/jquery-ui-1.9.1.custom.css").text %>
<% println new File("web/d3/d3.css").text %>
</style>

<script>
<%
println new File("javascript/jquery/1.9.1/js/jquery-1.8.2.js").text
println new File("javascript/jquery/1.9.1/js/jquery-ui-1.9.1.custom.min.js").text
%>
</script>

<style type="text/css">
#chart.ui-widget-content {
    background-color:#ffffff;
    background-image:none;
    border:none;
}

#draggable-title.ui-widget-content {
  foreground-color:#cccccc;
  background-color:#ffffff;
  background-image:none;
  border:none;
}

text {
  font-size: 11px;
}

rect {
  fill: none;
}
</style>

</head>
<body>
<div id="draggable-title" class="ui-widget-content">
  <h1 id="titletext">TreeMap</h1>
</div>

<div id="chart"></div>

<script type="text/javascript">
<%
  println DexUtil.getJSONString(dexData,
  {
    key, conMap ->
    if (conMap == null || conMap.size() == 0)
    {
      ", \"size\": 100"
    }
    else
    {
      ""
    }
  })
%>

readJson = function(text, callback)
{
  callback(text ? JSON.parse(text) : null);
}

var width = 800,
    height = 800,
    fontSize = 12;
    
function draw()
{
  drawTreeMap(width, height, fontSize);
}

function drawTreeMap(width, height, fontSize)
{
  var w = width,
    h = height,
    x = d3.scale.linear().range([0, w]),
    y = d3.scale.linear().range([0, h]),
    color = d3.scale.category20(),
    root,
    node;

  var treemap = d3.layout.treemap()
    .round(false)
    .size([w, h])
    .sticky(true)
    .value(function(d) { return d.size; });

  var svg = d3.select("#chart")
    .append("svg:svg")
    .attr("width", w)
    .attr("height", h)
    .append("svg:g")
    .attr("transform", "translate(.5,.5)");

  readJson(JSON.stringify(jsonData), function(data)
  {
    node = root = data;

    var nodes = treemap.nodes(root)
      .filter(function(d) { return !d.children; });

    var cell = svg.selectAll("g")
      .data(nodes)
      .enter().append("svg:g")
      .attr("class", "cell")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .on("click", function(d) { return zoom(node == d.parent ? root : d.parent); });

    cell.append("svg:rect")
      .attr("width", function(d) { return d.dx - 1; })
      .attr("height", function(d) { return d.dy - 1; })
      .style("fill", function(d) { return color(d.parent.name); });

    cell.append("svg:text")
      .attr("x", function(d) { return d.dx / 2; })
      .attr("y", function(d) { return d.dy / 2; })
      .attr("dy", ".35em")
      .attr("text-anchor", "middle")
      .text(function(d) { return d.name; })
      .style("opacity", function(d) { d.w = this.getComputedTextLength(); return d.dx > d.w ? 1 : 0; });

    d3.select(window).on("click", function() { zoom(root); });

    d3.select("select").on("change", function()
    {
      treemap.value(this.value == "size" ? size : count).nodes(root);
      zoom(node);
    });
  });

  function size(d)
  {
    return d.size;
  }

  function count(d)
  {
    return 1;
  }

  function zoom(d)
  {
    var kx = w / d.dx, ky = h / d.dy;
    x.domain([d.x, d.x + d.dx]);
    y.domain([d.y, d.y + d.dy]);

    var t = svg.selectAll("g.cell").transition()
      .duration(d3.event.altKey ? 7500 : 750)
      .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });

    t.select("rect")
      .attr("width", function(d) { return kx * d.dx - 1; })
      .attr("height", function(d) { return ky * d.dy - 1; })

    t.select("text")
      .attr("x", function(d) { return kx * d.dx / 2; })
      .attr("y", function(d) { return ky * d.dy / 2; })
      .style("opacity", function(d) { return kx * d.dx > d.w ? 1 : 0; });

    node = d;
    d3.event.stopPropagation();
  }
}

draw();

<%
   println """
	\$(function() {
		\$( "#height-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: height,
		  slide : function(event, ui)
		  {
		    d3.select("#chart").html("");
		    height = ui.value;
		    draw();
	        \$("#height").val(\$("#height-slider").slider("value"));
		  }
		});
		\$("#height").val(\$("#height-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#width-slider" ).slider(
		{
	      min: 100,
		  max: 2000,
		  value: width,
		  slide : function(event, ui)
		  {
		    d3.select("#chart").html("");
		    width = ui.value;
		    draw();
	        \$("#width").val(\$("#width-slider").slider("value"));
		  }
		});
		\$("#width").val(\$("#width-slider").slider("value"));
	});
"""

   println """
	\$(function() {
		\$( "#fontsize-slider" ).slider(
		{
	      min: 1,
		  max: 48,
		  value: fontSize,
		  slide : function(event, ui)
		  {
		    d3.select("#chart").html("");
		    fontSize = ui.value;
		    draw();
	        \$("#fontsize").val(\$("#fontsize-slider").slider("value"));
		  }
		});
		\$("#fontsize").val(\$("#fontsize-slider").slider("value"));
	});
"""

   println """
    \$(function() {
    	\$( "#draggable-title" ).draggable();
        \$( "#config" ).draggable();
        \$( "#chart" ).draggable();
    });
    
function titleChange(newTitle)
{
  d3.select("title").text(newTitle);
  d3.select("#titletext").text(newTitle);
}

"""
%>
</script>
    
<div id="config" class="demo">
    <h1>Configuration</h1>
	<div>
		<label for="height">Height:</label>
		<input type="text" id="height" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="height-slider"/>
	</div>
	<div>
		<label for="width">Width:</label>
		<input type="text" id="width" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="width-slider"/>
	</div>
	<div>
		<label for="fontsize">Font Size:</label>
		<input type="text" id="fontsize" size="5" style="border:0; color:#f6931f; font-weight:bold;" />
		<div id="fontsize-slider"/>
	</div>
	<div>
		<label for="charttitle">Title:</label>
		<input type="text" id="charttitle" size="20" style="border:2; color:#f6931f; font-weight:10;" onchange="titleChange(this.value)" />
	</div>
</div>
  </body>
</html>
