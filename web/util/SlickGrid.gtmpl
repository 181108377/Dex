<!DOCTYPE HTML>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <title>SlickGrid example 1: Basic grid</title>
<style>
    .slick-headerrow-column {
      background: #87ceeb;
      text-overflow: clip;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
    }
    .slick-headerrow-column input {
      margin: 0;
      padding: 0;
      width: 100%;
      height: 100%;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
    }
<%
  out.println new File("javascript/slickgrid/latest/slick.grid.css").text
  out.println new File("javascript/slickgrid/latest/css/smoothness/jquery-ui-1.8.16.custom.css").text
  out.println new File("javascript/slickgrid/latest/examples/examples.css").text
  out.println new File("javascript/slickgrid/latest/slick-default-theme.css").text
%>
#myGrid {
  height : 500px;
  width  : 600px;
}
</style>
</head>
<body>
<table width="100%">
  <tr>
    <td valign="top" width="100%">
      <div id="myGrid"></div>
    </td>
  </tr>
</table>

<script>
<%
  out.println new File("javascript/slickgrid/latest/lib/firebugx.js").text
  out.println new File("javascript/slickgrid/latest/lib/jquery-1.7.min.js").text
  out.println new File("javascript/slickgrid/latest/lib/jquery-ui-1.8.16.custom.min.js").text
  out.println new File("javascript/slickgrid/latest/lib/jquery.event.drag-2.2.js").text
  out.println new File("javascript/slickgrid/latest/slick.core.js").text
  out.println new File("javascript/slickgrid/latest/slick.dataview.js").text
  out.println new File("javascript/slickgrid/latest/slick.grid.js").text
%>
</script>

<script>
  var grid;
  var dataview;
  var columnFilters = {};
<%
    int i=0;
    out.println "var columns = [" + header.collect {
      "{id: $i, name: \"$it\", field: ${i++} }" }.join(",\n") +
      "];"

    def mapList = dexData.getMapList()
    def strList = []
    
    mapList.eachWithIndex {
      rowmap, ri ->
      def fieldList = [ "\"id\" : $ri" ];
      
      rowmap.each { k, v -> fieldList << "\"$k\" : \"$v\"" }
      strList << "{ " + fieldList.join(",") + "}";
    }
    
    out.println "var data = [ " + strList.join(",\n") + "];"
%>
  console.dir(columns);
  
  var options = {
    enableCellNavigation: true,
    enableColumnReorder: false,
    multiColumnSort: true,
    showHeaderRow: true,
    headerRowHeight: 30,
    explicitInitialization: true
  };

  dataView = new Slick.Data.DataView();
  grid = new Slick.Grid("#myGrid", dataView, columns, options);
    
  function filter(item) {
    for (var columnId in columnFilters) {
      if (columnId !== undefined && columnFilters[columnId] !== "") {
        var c = grid.getColumns()[grid.getColumnIndex(columnId)];
        if (item[c.field] != columnFilters[columnId]) {
          return false;
        }
      }
    }
    return true;
  }
    
  grid.onSort.subscribe(function (e, args) {
    var cols = args.sortCols;
    data.sort(function (dataRow1, dataRow2) {
      for (var i = 0, l = cols.length; i < l; i++) {
        var field = cols[i].sortCol.field;
        var sign = cols[i].sortAsc ? 1 : -1;
        var value1 = dataRow1[field], value2 = dataRow2[field];
        var result = (value1 == value2 ? 0 : (value1 > value2 ? 1 : -1)) * sign;
        if (result != 0) {
          return result;
        }
      }
      return 0;
    });
    grid.invalidate();
    grid.render();
  });
    
  dataView.onRowCountChanged.subscribe(function (e, args) {
    grid.updateRowCount();
    grid.render();
  });
  dataView.onRowsChanged.subscribe(function (e, args) {
    grid.invalidateRows(args.rows);
    grid.render();
  });
  \$(grid.getHeaderRow()).delegate(":input", "change keyup", function (e) {
    var columnId = \$(this).data("columnId");
    if (columnId != null) {
      columnFilters[columnId] = \$.trim(\$(this).val());
      dataView.refresh();
    }
  });

  grid.onHeaderRowCellRendered.subscribe(function(e, args) {
    \$(args.node).empty();
    \$("<input type='text'>")
      .data("columnId", args.column.id)
      .val(columnFilters[args.column.id])
      .appendTo(args.node);
  });
  console.dir(data);
  grid.init();
  dataView.beginUpdate();
  dataView.setItems(data);
  dataView.setFilter(filter);
  dataView.endUpdate();
</script>
</body>
</html>
