<!DOCTYPE html>
<meta charset="utf-8">

<style>
<% println new File("javascript/nvd3/latest/src/nv.d3.css").text %>
</style>

<style>

body {
  /*overflow-y:scroll;*/
}

text {
  font: 12px sans-serif;
}

svg {
  display: block;
}

#chart1 svg {
  min-width: 100px;
  min-height: 100px;
  height: 500px;

/*
  margin: 50px;
  Minimum height and width is a good idea to prevent negative SVG dimensions...
  For example width should be =< margin.left + margin.right + 1,
  of course 1 pixel for the entire chart would not be very useful, BUT should not have errors
*/
}

</style>

<body>

  <div id="chart">
    <svg/>
  </div>

<script type="text/javascript">
<% println new File("javascript/nvd3/latest/lib/d3.v2.min.js").text
println new File("javascript/nvd3/latest/lib/crossfilter.min.js").text
println new File("javascript/nvd3/latest/nv.d3.min.js").text
println new File("javascript/nvd3/latest/src/tooltip.js").text
println new File("javascript/nvd3/latest/src/utils.js").text
println new File("javascript/nvd3/latest/src/models/legend.js").text
println new File("javascript/nvd3/latest/src/models/axis.js").text
println new File("javascript/nvd3/latest/src/models/scatter.js").text
println new File("javascript/nvd3/latest/src/models/line.js").text
println new File("javascript/nvd3/latest/src/models/lineWithFocusChart.js").text
println new File("javascript/nvd3/latest/examples/stream_layers.js").text %>
</script>

<%
  def dexHeader = dexData.getNumericColumns()
  def colMap = dexData.getColumnMap()
%>

<script type="text/javascript">

nv.addGraph(function() {
  var chart =
    nv.models.lineWithFocusChart();

  chart.xAxis
      .tickFormat(d3.format(',f'))
      .rotateLabels(0);
  chart.x2Axis
      .tickFormat(d3.format(',f'));

  chart.yAxis
      .tickFormat(d3.format(',f'));
  chart.y2Axis
      .tickFormat(d3.format(',f'));


var data = [
<%
  def seriesList = []
  (1..(dexHeader.size()-1)).each
  {
    i ->
    def series = "{key: '${dexHeader[i]}', values: ["
    def points = []
    data.eachWithIndex
    {
      row, ri ->
      points << "{x:${row[0]},y:${row[i]}}"
    }
    series += points.join(",") + "]}";
    seriesList << series;
  }
  println seriesList.join(",\n")
%>
];

  d3.select("#chart").selectAll("svg").remove();
  
  d3.select("#chart").append("svg")
      .datum(data)
    .transition().duration(1)
      .call(chart);

  nv.utils.windowResize(chart.update);

  return chart;
});

</script>
