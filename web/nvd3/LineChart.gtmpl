<!DOCTYPE html>
<meta charset="utf-8">

<style>

        text {
            font: 12px sans-serif;
        }
        svg {
            display: block;
        }
        html, body, #chart, svg {
            margin: 0px;
            padding: 0px;
            height: 100%;
            width: 100%;
        }

<% println new File("javascript/nvd3/latest/nv.d3.min.css").text %>

</style>

<body>

  <div id="chart">
    <svg></svg>
  </div>

<script>
<%
  println new File("javascript/d3/latest/d3.min.js").text
  println new File("javascript/nvd3/latest/nv.d3.min.js").text
  //println new File("javascript/dexjs/latest/dex.js").text
%>
</script>
<script type="text/javascript">

var chartData = [
<%
def entries = []
def invalids = [ 0 ]
def series = [:]

header.eachWithIndex { h, i -> if (!(i in invalids)) series[h] = [] }

// Data check to see which data is invalid:
data.eachWithIndex
{
  row, ri ->
  row.eachWithIndex
  {
    col, ci ->
    if (!(ci in invalids))
    {
      try
      {
        Double.parseDouble(col);
      }
      catch (Exception ex)
      {
        invalids << ci
      }
    }
  }
}

data.eachWithIndex
{
  row, ri ->
  row.eachWithIndex
  {
    col, ci ->
    if (ci > 0 && !(ci in invalids))
    {
      series[header[ci]] << "{x:\"${row[0]}\", y:$col }";
    }
  }
}

series.each
{
  seriesName, seriesValues ->

  def entry = "{\"key\":\"$seriesName\",\"values\":"

  entry += seriesValues.toString() + "}"
  entries << entry
}
print entries.join(",\n")
%>
];

<% println "var xLabel = \"${header[0]}\";" %>

nv.addGraph(function() {
  var chart = nv.models.lineChart()
    .margin({top:40,bottom:40,left:100,right:40});

  chart.xAxis // chart sub-models (ie. xAxis, yAxis, etc) when accessed directly, return themselves, not the parent chart, so need to chain separately
      .axisLabel(xLabel)
      .tickFormat(d3.format(',.1f'));
      //.tickFormat(function(d, i) { return "Y" + d});

  chart.yAxis
      //.axisLabel('Y Title')
      .tickFormat(d3.format(',f'));

  d3.select('#chart svg')
      //.datum([]) //for testing noData
      .datum(chartData)
    .transition().duration(250)
      .call(chart);

  //TODO: Figure out a good way to do this automatically
  nv.utils.windowResize(chart.update);
  //nv.utils.windowResize(function() { d3.select('#chart1 svg').call(chart) });

  return chart;
});

</script>
</body></html>
