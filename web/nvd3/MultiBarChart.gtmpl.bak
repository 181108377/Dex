<!DOCTYPE html>
<meta charset="utf-8">

<style>
<% println new File("javascript/nvd3/latest/src/nv.d3.css").text %>
body {
  overflow-y:scroll;
}

text {
  font: 12px sans-serif;
}

svg {
  display: block;
}

#chart1 {
  height: 100%;
  width: 100%;
}

#chart1 svg {
  height: 95%;
  width: 95%;
  margin: 0px;
/*
  margin: 50px;
  Minimum height and width is a good idea to prevent negative SVG dimensions...
  For example width should be =< margin.left + margin.right + 1,
  of course 1 pixel for the entire chart would not be very useful, BUT should not have errors
*/
}

</style>
<body>

  <div id="chart1">
    <svg height="100%" width="100%"></svg>
  </div>

<script>
<% println new File("javascript/nvd3/latest/lib/d3.v2.js").text %>
<% println new File("javascript/nvd3/latest/nv.d3.js").text %>
<% println new File("javascript/nvd3/latest/src/tooltip.js").text %>
<% println new File("javascript/nvd3/latest/src/utils.js").text %>
<% println new File("javascript/nvd3/latest/src/models/legend.js").text %>
<% println new File("javascript/nvd3/latest/src/models/axis.js").text %>
<% println new File("javascript/nvd3/latest/src/models/multiBar.js").text %>
<% println new File("javascript/nvd3/latest/src/models/multiBarChart.js").text %>
<% println new File("javascript/nvd3/latest/examples/stream_layers.js").text %>
</script>

<script type="text/javascript">

<%
  def numericColumns = dexData.getNumericColumns()
  colMap = dexData.getColumnMap()
  def seriesList = []

  def xData = colMap[numericColumns[0]];

  for (int i=1; i<numericColumns.size(); i++)
  {
    def rows = [];

    def yData = colMap[numericColumns[i]]
    
    yData.eachWithIndex
    {
      y, yi ->
      rows << "{ x: " + xData[yi] + ", y: " + yData[yi] + "}"
    }
    
    seriesList << "{ key: \"" + numericColumns[i] + "\", values: [" + rows.join(",") + "]}"
  }

  println "var chartData = [ " + seriesList.join(",") + "];"
%>

var negative_test_data = new d3.range(0,3).map(function(d,i) { return {
  key: 'Stream' + i,
  values: new d3.range(0,10).map( function(f,j) {
    return {
             y: 10 + Math.random()*100 * (Math.floor(Math.random()*100)%2 ? 1 : -1),
             x: j
           }
  })
  };  
});

console.dir(negative_test_data);

var chart;
nv.addGraph(function() {
    chart = nv.models.multiBarChart()
      .barColor(d3.scale.category20().range());

    chart.xAxis
        .showMaxMin(true)
        .tickFormat(d3.format(',f'));

    chart.yAxis
        .tickFormat(d3.format(',.1f'));

    d3.select('#chart1 svg')
        .datum(chartData)
      .transition().duration(500).call(chart);

    nv.utils.windowResize(chart.update);

    chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });

    return chart;
});


</script>
