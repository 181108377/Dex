<!DOCTYPE html>
<meta charset="utf-8">

<style>
<% println new File("javascript/nvd3/latest/src/nv.d3.css").text %>
</style>

<style>

body {
  overflow-y:scroll;
}

text {
  font: 12px sans-serif;
}

#chart {
  height: 100%;
  width: 100%;
}

#chart svg {
  height: 95%;
  width: 95%;
  margin: 0px;
/*
  margin: 50px;
  Minimum height and width is a good idea to prevent negative SVG dimensions...
  For example width should be =< margin.left + margin.right + 1,
  of course 1 pixel for the entire chart would not be very useful, BUT should not have errors
*/
}

</style>
<body>

<div id="chart">
  <svg></svg>
</div>

<script>
<% println new File("javascript/nvd3/latest/lib/d3.v2.min.js").text %>
<% println new File("javascript/nvd3/latest/nv.d3.js").text %>
<% println new File("javascript/nvd3/latest/src/utils.js").text %>
<% println new File("javascript/nvd3/latest/src/models/axis.js").text %>
<% println new File("javascript/nvd3/latest/src/tooltip.js").text %>
<% println new File("javascript/nvd3/latest/src/models/legend.js").text %>
<% println new File("javascript/nvd3/latest/src/models/axis.js").text %>
<% println new File("javascript/nvd3/latest/src/models/scatter.js").text %>
<% println new File("javascript/nvd3/latest/src/models/stackedArea.js").text %>
<% println new File("javascript/nvd3/latest/src/models/stackedAreaChart.js").text %>
</script>

<script type="text/javascript">

var chartData = [
<%
def entries = []
def invalids = [ 0 ]
def series = [:]

header.eachWithIndex { h, i -> if (!(i in invalids)) series[h] = [] }

// Data check to see which data is invalid:
data.eachWithIndex
{
  row, ri ->
  row.eachWithIndex
  {
    col, ci ->
    if (!(ci in invalids))
    {
      try
      {
        Double.parseDouble(col);
      }
      catch (Exception ex)
      {
        invalids << ci
      }
    }
  }
}

data.each
{
  row ->
  row.eachWithIndex
  {
    col, ci ->
    if (!(ci in invalids))
    {
      series[header[ci]] << [ row[0], col ];
    }
  }
}

series.each
{
  seriesName, seriesValues ->

  def entry = "{\"key\":\"$seriesName\",\"values\":"

  entry += seriesValues.toString() + "}"
  entries << entry
}
print entries.join(",\n")
%>
];

/*
.map(function(series) {
  series.values = series.values.map(function(d) {
    return { x: d[0], y: d[1] }
  });
  return series;
});
*/

//an example of harmonizing colors between visualizations
//observe that Consumer Discretionary and Consumer Staples have 
//been flipped in the second chart
var colors = d3.scale.category20();
keyColor = function(d, i) {return colors(d.key)};

nv.addGraph(function() {
  var chart = nv.models.stackedAreaChart()
                .x(function(d) { return d[0] })
                .y(function(d) { return d[1] })
                .color(keyColor)
                //.clipEdge(true);

//  chart.xAxis
//      .tickFormat(function(d) { return d3.time.format('%x')(new Date(d)) });

  chart.xAxis
      .tickFormat(function(d) { return d });
      
  chart.yAxis
      .tickFormat(d3.format(',f'));
  
  d3.select("#chart svg")
    .datum(chartData)
      .transition().duration(500).call(chart);

  nv.utils.windowResize(chart.update);

  return chart;
});

</script>
</body></html>
